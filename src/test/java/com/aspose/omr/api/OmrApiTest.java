/*
 * Copyright (c) 2018 Aspose Pty Ltd. All Rights Reserved.
 *
 * Licensed under the MIT (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://github.com/aspose-omr-cloud/aspose-omr-cloud-java/blob/master/LICENSE
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Aspose.OMR for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.omr.api;

import com.aspose.omr.client.ApiException;
import com.aspose.omr.model.OMRFunctionParam;
import com.aspose.omr.model.OMRResponse;
import org.junit.Test;
import org.junit.Ignore;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

import java.nio.file.Paths;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;


/**
 * API tests for OmrApi
 */
@Ignore
public class OmrApiTest {
    private final String LogosFolderName = "Logos";
    private final String[] LogoFiles = {"logo1.jpg", "logo2.png"};

    public class TestConfig {
        String app_key;
        String app_sid;
        String base_path;
    }
    public OmrApiTest() throws Exception{
        TestConfig config = loadConfig();
        api = new OmrApi(config.app_key, config.app_sid
                , config.base_path);
        api.getApiClient().setDebugging(false);
        System.out.println("Using " + config.base_path + " as " + config.app_sid);
    }
    
    private final OmrApi api;
    String sdkRootFolder;
    
    String dataFolder() {
        return Paths.get(sdkRootFolder, "Data").toAbsolutePath().toString();
    }

    TestConfig loadConfig() throws Exception {
        TestConfig result = new TestConfig();
        String testFileName = "test_config.json";
        sdkRootFolder = Paths.get("").toAbsolutePath().toString();
        sdkRootFolder = Paths.get("").toRealPath().toString();
        String sdkPrevRootFolder = "";
        while (!Files.exists(Paths.get(sdkRootFolder, testFileName)) && !sdkRootFolder.equals(sdkPrevRootFolder)) {
            sdkPrevRootFolder = sdkRootFolder;
            sdkRootFolder = Paths.get(sdkRootFolder, "..").toRealPath().toString();
        }
        if (!Files.exists(Paths.get(sdkRootFolder, testFileName)))
            throw new Exception("Config file not found '" + testFileName + "'");
        String content = new String(Files.readAllBytes(Paths.get(sdkRootFolder, testFileName)));
        Gson gson = new GsonBuilder().create();
        result = gson.fromJson(content, TestConfig.class);

        return result;
    }


    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void omrPostRunOmrTaskTest() throws ApiException {
        String name = null;
        String actionName = null;
        OMRFunctionParam param = new OMRFunctionParam();
        String storage = null;
        String folder = null;

        //Folder Logos has to be created and populated with files logo1.jpg and logo2.png
        //Also you need to upload Aspose_test.txt file
        param.setFunctionParam("{ \"ExtraStoragePath\":\"Logos\"}");
        OMRResponse response = api.postRunOmrTask("Aspose_test.txt", "GenerateTemplate", param, null, null);
    }
    
}
