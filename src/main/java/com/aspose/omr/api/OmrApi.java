/*
 * Copyright (c) 2018 Aspose Pty Ltd. All Rights Reserved.
 *
 * Licensed under the MIT (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://github.com/aspose-omr-cloud/aspose-omr-cloud-java/blob/master/LICENSE
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Aspose.OMR for Cloud API Reference
 * Aspose.OMR for Cloud helps performing optical mark recognition in the cloud
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.omr.api;

import com.aspose.omr.client.ApiCallback;
import com.aspose.omr.client.ApiClient;
import com.aspose.omr.client.ApiException;
import com.aspose.omr.client.ApiResponse;
import com.aspose.omr.client.Configuration;
import com.aspose.omr.client.Pair;
import com.aspose.omr.client.ProgressRequestBody;
import com.aspose.omr.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.omr.model.OMRFunctionParam;
import com.aspose.omr.model.OMRResponse;

import java.lang.reflect.Type;

public class OmrApi {
    private ApiClient apiClient;

    public OmrApi(String appKey, String appSid, String basePath) {
        this(new ApiClient(appKey, appSid, basePath));
        apiClient.setReadTimeout(Configuration.DefaultReadTimeout);
    }

    public OmrApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for postRunOmrTask
     * @param name Name of the file to recognize. (required)
     * @param actionName Action name [&#39;CorrectTemplate&#39;, &#39;FinalizeTemplate&#39;, &#39;RecognizeImage&#39;] (required)
     * @param param Function params, specific for each actionName (optional)
     * @param storage Image&#39;s storage. (optional)
     * @param folder Image&#39;s folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postRunOmrTaskCall(String name, String actionName, OMRFunctionParam param, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = param;
        
        // create path and map variables
        String localVarPath = "/omr/{name}/runOmrTask"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        if (actionName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("actionName", actionName));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postRunOmrTaskValidateBeforeCall(String name, String actionName, OMRFunctionParam param, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postRunOmrTask(Async)");
        }
        
        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling postRunOmrTask(Async)");
        }
        
        
        com.squareup.okhttp.Call call = postRunOmrTaskCall(name, actionName, param, storage, folder, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Run specific OMR task
     * 
     * @param name Name of the file to recognize. (required)
     * @param actionName Action name [&#39;CorrectTemplate&#39;, &#39;FinalizeTemplate&#39;, &#39;RecognizeImage&#39;] (required)
     * @param param Function params, specific for each actionName (optional)
     * @param storage Image&#39;s storage. (optional)
     * @param folder Image&#39;s folder. (optional)
     * @return OMRResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OMRResponse postRunOmrTask(String name, String actionName, OMRFunctionParam param, String storage, String folder) throws ApiException {
        ApiResponse<OMRResponse> resp = postRunOmrTaskWithHttpInfo(name, actionName, param, storage, folder);
        return resp.getData();
    }

    /**
     * Run specific OMR task
     * 
     * @param name Name of the file to recognize. (required)
     * @param actionName Action name [&#39;CorrectTemplate&#39;, &#39;FinalizeTemplate&#39;, &#39;RecognizeImage&#39;] (required)
     * @param param Function params, specific for each actionName (optional)
     * @param storage Image&#39;s storage. (optional)
     * @param folder Image&#39;s folder. (optional)
     * @return ApiResponse&lt;OMRResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OMRResponse> postRunOmrTaskWithHttpInfo(String name, String actionName, OMRFunctionParam param, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postRunOmrTaskValidateBeforeCall(name, actionName, param, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<OMRResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run specific OMR task (asynchronously)
     * 
     * @param name Name of the file to recognize. (required)
     * @param actionName Action name [&#39;CorrectTemplate&#39;, &#39;FinalizeTemplate&#39;, &#39;RecognizeImage&#39;] (required)
     * @param param Function params, specific for each actionName (optional)
     * @param storage Image&#39;s storage. (optional)
     * @param folder Image&#39;s folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postRunOmrTaskAsync(String name, String actionName, OMRFunctionParam param, String storage, String folder, final ApiCallback<OMRResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postRunOmrTaskValidateBeforeCall(name, actionName, param, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OMRResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
